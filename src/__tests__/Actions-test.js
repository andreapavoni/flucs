require('core-js/shim')

jest.dontMock('../Actions')
jest.dontMock('../Dispatcher')
jest.dontMock('../utils')

var Actions = require('../Actions')
var Dispatcher = require('../Dispatcher')

describe('Actions', () => {
  describe('static methods()', () => {
    describe('createFromObject()', () => {
      it('decorates given object with Actions prototype', function() {
        let obj = function() {}
        obj = Actions.createFromObject(obj)
        expect(typeof obj.generateActions).toBe('function')
      })
    })
  })

  describe('prototype methods', () => {
    var MyActions

    beforeEach(() => {
      MyActions = new Actions()
    })

    describe('generateActions()', () => {
      it('autogenerates actions with dispatch', function() {
        let listener = jest.genMockFunction()
        let payload = {actionType: 'Actions.autogenerated', payload: {a: 1}}

        MyActions.generateActions('autogenerated')
        Dispatcher.register(listener)
        MyActions.autogenerated({a: 1})

        expect(listener.mock.calls.length).toBe(1)
        expect(listener.mock.calls[0][0]).toEqual(payload)
      })
    })

    describe('dispatch()', () => {
      it('dispatches an action with prefix based on class name', function() {
        let listener = jest.genMockFunction()
        let payload = {actionType: 'Actions.someAction', payload: {a: 1}}
        Dispatcher.register(listener)
        MyActions.dispatch('someAction', {a: 1})

        expect(listener.mock.calls.length).toBe(1)
        expect(listener.mock.calls[0][0]).toEqual(payload)
      })

      it('dispatches an action with custom prefix', function() {
        let listener = jest.genMockFunction()
        let payload = {actionType: 'Custom.someAction', payload: {a: 1}}
        Dispatcher.register(listener)
        MyActions.dispatch('someAction', {a: 1}, 'Custom')

        expect(listener.mock.calls.length).toBe(1)
        expect(listener.mock.calls[0][0]).toEqual(payload)
      })
    })
  })
})
